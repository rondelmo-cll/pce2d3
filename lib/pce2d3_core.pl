:- use_module(pce2d3_config).

% http://www.swi-prolog.org/pldoc/man?section=reexport
%% this program can be switched.
%%   if you switch output_to_pce on,  uncomment the following reexport lines.
%%   if you switch output_to_pce off,   comment the following reexport lines.

:- reexport(library(pce),
			except([
			  new/2 as origpce_new,
			  free/1 as origpce_free,
			  send/2 as origpce_send,
			  send/3 as origpce_send,
			  send/4 as origpce_send,
			  send/5 as origpce_send,
			  send/6 as origpce_send,
			  send/7 as origpce_send,
			  send/8 as origpce_send,
			  get/3 as origpce_get,
			  get/4 as origpce_get,
			  get/5 as origpce_get,
			  get/6 as origpce_get,
			  get/7 as origpce_get,
			  get/8 as origpce_get
					  ])).

:- multifile     d3intercept/2, d3intercept/3, d3intercept/4, d3intercept/5, d3intercept/6, d3intercept/7, d3intercept/8, d3intercept/9.
:- discontiguous d3intercept/2, d3intercept/3, d3intercept/4, d3intercept/5, d3intercept/6, d3intercept/7, d3intercept/8, d3intercept/9.

% 
% NEW
% 

new(A,B) :-
	(output_to_d3, d3intercept(new,A,B), fail) ;
	(output_to_pce, origpce_new(A,B)) ; true.




% 
% FREE
% 

free(A) :-
	(output_to_d3, d3intercept(free,A), fail) ;
	(output_to_pce, origpce_free(A)) ; true.


%
% SEND
%
send(A) :-
	(output_to_d3, d3intercept(send,A), fail) ;
	(output_to_pce, origpce_send(A)) ; true.
send(A,B) :-
	(output_to_d3, d3intercept(send,A,B), fail) ;
	(output_to_pce, origpce_send(A,B)) ; true.
send(A,B,C) :-
	(output_to_d3, d3intercept(send,A,B,C), fail) ;
	(output_to_pce, origpce_send(A,B,C)) ; true.
send(A,B,C,D) :-
	(output_to_d3, d3intercept(send,A,B,C,D), fail) ;
	(output_to_pce, origpce_send(A,B,C,D)) ; true.
send(A,B,C,D,E) :-
	(output_to_d3, d3intercept(send,A,B,C,D,E), fail) ;
	(output_to_pce, origpce_send(A,B,C,D,E)) ; true.
send(A,B,C,D,E,F) :-
	(output_to_d3, d3intercept(send,A,B,C,D,E,F), fail) ;
	(output_to_pce, origpce_send(A,B,C,D,E,F)) ; true.
send(A,B,C,D,E,F,G) :-
	(output_to_d3, d3intercept(send,A,B,C,D,E,F,G), fail) ;
	(output_to_pce, origpce_send(A,B,C,D,E,F,G)) ; true.
send(A,B,C,D,E,F,G,H) :-
	(output_to_d3, d3intercept(send,A,B,C,D,E,F,G,H), fail) ;
	(output_to_pce, origpce_send(A,B,C,D,E,F,G,H)) ; true.




%
% GET
%
% we might need a way to call d3 getters to satisfy the callers
get(A) :-
	(output_to_d3, d3intercept(get,A), fail) ;
	(output_to_pce, origpce_get(A)) ; true.
get(A,B) :-
	(output_to_d3, d3intercept(get,A,B), fail) ;
	(output_to_pce, origpce_get(A,B)) ; true.
get(A,B,C) :-
	(output_to_d3, d3intercept(get,A,B,C), fail) ;
	(output_to_pce, origpce_get(A,B,C)) ; true.
get(A,B,C,D) :-
	(output_to_d3, d3intercept(get,A,B,C,D), fail) ;
	(output_to_pce, origpce_get(A,B,C,D)) ; true.
get(A,B,C,D,E) :-
	(output_to_d3, d3intercept(get,A,B,C,D,E), fail) ;
	(output_to_pce, origpce_get(A,B,C,D,E)) ; true.
get(A,B,C,D,E,F) :-
	(output_to_d3, d3intercept(get,A,B,C,D,E,F), fail) ;
	(output_to_pce, origpce_get(A,B,C,D,E,F)) ; true.
get(A,B,C,D,E,F,G) :-
	(output_to_d3, d3intercept(A,B,C,D,E,F,G), fail) ;
	(output_to_pce, origpce_get(A,B,C,D,E,F,G)) ; true.
get(A,B,C,D,E,F,G,H) :-
	(output_to_d3, d3intercept(get,A,B,C,D,E,F,G,H), fail) ;
	(output_to_pce, origpce_get(A,B,C,D,E,F,G,H)) ; true.



% 
% setupd3 -- a helper function to set up the symbol table.
% 

setupd3 :-
	(output_to_d3, writef("// the following code was autogenerated from xpce source by pce2d3.pl\nvar pg = d3.select(\"#pcegroup\") || d3.select(\"body\").append(\"div\").attr(\"id\",\"pcegroup\");\nvar symbols = {};\n",[])); true.



%
% default d3intercepts
%
% these are catch-all functions; if you get JS output looking like the below, then you probably need to write more "transpiler" code in the section about.
%
d3intercept(AA,A) :- writef("// d3intercept %w,%w\n",[AA,A]).
d3intercept(AA,A,B) :- writef("// d3intercept %w,%w,%w\n",[AA,A,B]).
d3intercept(AA,A,B,C) :- writef("// d3intercept %w,%w,%w,%w\n",[AA,A,B,C]).
d3intercept(AA,A,B,C,D) :- writef("// d3intercept %w,%w,%w,%w,%w\n",[AA,A,B,C,D]).
d3intercept(AA,A,B,C,D,E) :- writef("// d3intercept %w,%w,%w,%w,%w,%w\n",[AA,A,B,C,D,E]).
d3intercept(AA,A,B,C,D,E,F) :- writef("// d3intercept %w,%w,%w,%w,%w,%w,%w\n",[AA,A,B,C,D,E,F]).
d3intercept(AA,A,B,C,D,E,F,G) :- writef("// d3intercept %w,%w,%w,%w,%w,%w,%w,%w\n",[AA,A,B,C,D,E,F,G]).
d3intercept(AA,A,B,C,D,E,F,G,H) :- writef("// d3intercept %w,%w,%w,%w,%w,%w,%w,%w,%w\n",[AA,A,B,C,D,E,F,G,H]).


% helper function -- strip @ from object name to make it a legal js variable name
% at_less(@foo,X)
at_less(T,OutT) :-
	term_string(T,S),
	(   sub_string(S,0,1,_,"@")
	 -> sub_string(S,1,_,0,Out )
	 ;  Out = S),
	term_string(OutT,Out).

